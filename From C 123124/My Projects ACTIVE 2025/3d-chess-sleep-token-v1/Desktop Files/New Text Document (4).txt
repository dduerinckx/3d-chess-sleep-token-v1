<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>3D Maze Game Demo</title>
    <style>
      body { margin: 0; overflow: hidden; }
      #debug {
        position: absolute;
        top: 10px;
        left: 10px;
        color: #fff;
        background: rgba(0, 0, 0, 0.5);
        padding: 10px;
        font-family: sans-serif;
        z-index: 100;
      }
    </style>
  </head>
  <body>
    <div id="debug">Loading...</div>
    <!-- Three.js (r128) via CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!-- GLTFLoader from jsDelivr -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <!-- OrbitControls from jsDelivr -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script>
      // Scene setup
      const scene = new THREE.Scene();

      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, 50, 50);
      camera.lookAt(0, 0, 0);

      const renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      // Lighting
      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.0);
      hemiLight.position.set(0, 50, 0);
      scene.add(hemiLight);

      const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);
      dirLight.position.set(0, 50, 50);
      scene.add(dirLight);

      // Debug overlay element
      const debugDiv = document.getElementById('debug');

      // Maze parameters
      const mazeRows = 16, mazeCols = 16;
      const cellSize = 4;
      const mazeWidth = mazeCols * cellSize;
      const mazeHeight = mazeRows * cellSize;
      // Reserve central open area (cells 6 to 9)
      const openStart = 6, openEnd = 9;

      // Generate maze grid (true = wall, false = open)
      const maze = [];
      for (let i = 0; i < mazeRows; i++) {
        maze[i] = [];
        for (let j = 0; j < mazeCols; j++) {
          // Always mark outer boundary as walls
          if (i === 0 || i === mazeRows - 1 || j === 0 || j === mazeCols - 1) {
            maze[i][j] = true;
          } else if (i >= openStart && i <= openEnd && j >= openStart && j <= openEnd) {
            // Central open area
            maze[i][j] = false;
          } else {
            // 15% chance to place a wall in the remaining cells
            maze[i][j] = Math.random() < 0.15;
          }
        }
      }

      // Procedural textures using canvas

      // Floor Texture: Brown tone with grid lines
      function createFloorTexture() {
        const size = 256;
        const canvas = document.createElement('canvas');
        canvas.width = size;
        canvas.height = size;
        const context = canvas.getContext('2d');
        // Brown background
        context.fillStyle = '#8B4513';
        context.fillRect(0, 0, size, size);
        // Draw grid lines with a lighter brown
        context.strokeStyle = '#A0522D';
        context.lineWidth = 4;
        const gridSize = 32;
        for (let i = 0; i <= size; i += gridSize) {
          context.beginPath();
          context.moveTo(i, 0);
          context.lineTo(i, size);
          context.stroke();
          context.beginPath();
          context.moveTo(0, i);
          context.lineTo(size, i);
          context.stroke();
        }
        const texture = new THREE.CanvasTexture(canvas);
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.repeat.set(mazeCols, mazeRows);
        return texture;
      }

      // Wall Texture: Base gray with randomized patterns
      function createWallTexture() {
        const size = 256;
        const canvas = document.createElement('canvas');
        canvas.width = size;
        canvas.height = size;
        const context = canvas.getContext('2d');
        // Base color
        context.fillStyle = '#808080';
        context.fillRect(0, 0, size, size);
        // Add random circular patterns
        for (let i = 0; i < 50; i++) {
          context.fillStyle = 'rgba(100,100,100,0.5)';
          const x = Math.random() * size;
          const y = Math.random() * size;
          const radius = Math.random() * 20;
          context.beginPath();
          context.arc(x, y, radius, 0, Math.PI * 2);
          context.fill();
        }
        const texture = new THREE.CanvasTexture(canvas);
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.repeat.set(1, 1);
        return texture;
      }

      const floorTexture = createFloorTexture();
      const wallTexture = createWallTexture();

      // Create floor mesh
      const floorGeometry = new THREE.PlaneGeometry(mazeWidth, mazeHeight);
      const floorMaterial = new THREE.MeshPhongMaterial({ map: floorTexture, side: THREE.DoubleSide });
      const floorMesh = new THREE.Mesh(floorGeometry, floorMaterial);
      floorMesh.rotation.x = - Math.PI / 2;
      scene.add(floorMesh);

      // Create walls and compute their bounding boxes for collision detection
      const wallGroup = new THREE.Group();
      const wallBoundingBoxes = [];
      const wallGeometry = new THREE.BoxGeometry(cellSize, 4, cellSize);
      const wallMaterial = new THREE.MeshPhongMaterial({ map: wallTexture });

      for (let i = 0; i < mazeRows; i++) {
        for (let j = 0; j < mazeCols; j++) {
          if (maze[i][j]) {
            // Compute cell center (centering the maze at origin)
            const x = j * cellSize - mazeWidth / 2 + cellSize / 2;
            const z = i * cellSize - mazeHeight / 2 + cellSize / 2;
            const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
            wallMesh.position.set(x, 2, z); // y=2 positions the wall so its base sits on the floor (height=4)
            wallMesh.updateMatrixWorld();
            wallGroup.add(wallMesh);
            // Compute and store bounding box
            const bbox = new THREE.Box3().setFromObject(wallMesh);
            wallBoundingBoxes.push(bbox);
          }
        }
      }
      scene.add(wallGroup);

      // Soldier character & animations
      let soldier, mixer, idleAction, runAction;
      const loader = new THREE.GLTFLoader();
      loader.load('https://threejs.org/examples/models/gltf/Soldier.glb', function(gltf) {
        soldier = gltf.scene;
        soldier.scale.set(1.5, 1.5, 1.5);
        // Position soldier at (0,0,0) (within the central open area)
        soldier.position.set(0, 0, 0);
        scene.add(soldier);

        mixer = new THREE.AnimationMixer(soldier);
        // Assume first animation is idle and second is run (fallback if only one exists)
        if (gltf.animations.length > 1) {
          idleAction = mixer.clipAction(gltf.animations[0]);
          runAction = mixer.clipAction(gltf.animations[1]);
          idleAction.play();
        } else if (gltf.animations.length === 1) {
          idleAction = mixer.clipAction(gltf.animations[0]);
          idleAction.play();
          runAction = idleAction;
        }
      }, undefined, function(error) {
        console.error('An error occurred while loading the soldier model:', error);
      });

      // OrbitControls to let the camera orbit around the scene
      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.target.set(0, 0, 0);

      // Movement controls (WASD)
      const keys = {};
      document.addEventListener('keydown', function(event) {
        keys[event.code] = true;
      });
      document.addEventListener('keyup', function(event) {
        keys[event.code] = false;
      });

      // Collision detection: soldier collision radius
      const soldierCollisionRadius = 1;
      function checkCollision(position) {
        const soldierSphere = new THREE.Sphere(position, soldierCollisionRadius);
        for (let i = 0; i < wallBoundingBoxes.length; i++) {
          if (wallBoundingBoxes[i].intersectsSphere(soldierSphere)) {
            return true;
          }
        }
        return false;
      }

      // Main animation loop
      const clock = new THREE.Clock();
      function animate() {
        requestAnimationFrame(animate);
        const delta = clock.getDelta();
        if (mixer) mixer.update(delta);

        if (soldier) {
          // Determine movement based on WASD keys
          let moveX = 0, moveZ = 0;
          if (keys['KeyW']) moveZ -= 1;
          if (keys['KeyS']) moveZ += 1;
          if (keys['KeyA']) moveX -= 1;
          if (keys['KeyD']) moveX += 1;

          const moving = (moveX !== 0 || moveZ !== 0);
          if (moving) {
            // Compute a normalized movement vector from key inputs
            const moveDirection = new THREE.Vector3(moveX, 0, moveZ).normalize();
            // Determine the angle and adjust soldier orientation (+π adjustment)
            const angle = Math.atan2(moveDirection.x, moveDirection.z);
            soldier.rotation.y = angle + Math.PI;

            // Calculate world-space movement direction relative to the camera’s orientation
            const forward = new THREE.Vector3();
            camera.getWorldDirection(forward);
            forward.y = 0;
            forward.normalize();
            const right = new THREE.Vector3();
            right.crossVectors(forward, new THREE.Vector3(0, 1, 0)).normalize();

            const direction = new THREE.Vector3();
            direction.addScaledVector(forward, -moveZ);
            direction.addScaledVector(right, moveX);
            direction.normalize();

            const speed = 10; // units per second
            const displacement = direction.multiplyScalar(speed * delta);

            // Check for collision before moving
            const newPosition = soldier.position.clone().add(displacement);
            if (!checkCollision(newPosition)) {
              soldier.position.copy(newPosition);
            }

            // Transition to run animation if available
            if (runAction && idleAction && !runAction.isRunning()) {
              idleAction.fadeOut(0.2);
              runAction.reset().fadeIn(0.2).play();
            }
          } else {
            // No movement: transition back to idle animation if necessary
            if (idleAction && runAction && !idleAction.isRunning()) {
              runAction.fadeOut(0.2);
              idleAction.reset().fadeIn(0.2).play();
            }
          }

          // Update OrbitControls target to follow the soldier smoothly
          controls.target.lerp(soldier.position, 0.1);
          controls.update();

          // Update debug overlay with soldier's position and rotation
          debugDiv.innerHTML = 'Position: ' + soldier.position.x.toFixed(2) + ', ' +
                               soldier.position.y.toFixed(2) + ', ' + soldier.position.z.toFixed(2) +
                               '<br>Rotation Y: ' + soldier.rotation.y.toFixed(2);
        }

        renderer.render(scene, camera);
      }
      animate();

      // Responsive design: update camera and renderer on window resize
      window.addEventListener('resize', function() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      });
    </script>
  </body>
</html>
